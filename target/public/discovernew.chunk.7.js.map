{"version":3,"file":"discovernew.chunk.7.js","sources":["/plugin:discovernew/plugins/kibanaDiscover1/public/application/angular/doc_table/create_doc_table_embeddable.tsx","/plugin:discovernew/plugins/kibanaDiscover1/public/application/embeddable/helpers/update_search_source.ts","/plugin:discovernew/plugins/kibanaDiscover1/public/application/embeddable/saved_search_embeddable.tsx","/plugin:discovernew/plugins/kibanaDiscover1/public/application/embeddable/saved_search_embeddable_component.tsx"],"sourcesContent":["/*\n * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n * or more contributor license agreements. Licensed under the Elastic License\n * 2.0 and the Server Side Public License, v 1; you may not use this file except\n * in compliance with, at your election, the Elastic License 2.0 or the Server\n * Side Public License, v 1.\n */\nimport React, { useRef, useEffect } from 'react';\nimport { I18nProvider } from '@kbn/i18n/react';\nimport { getServices } from '../../../kibana_services';\nimport { injectAngularElement } from './create_doc_table_react';\n\nfunction getRenderFn(domNode, props) {\n  const directive = {\n    template: `<doc-table\n        class=\"panel-content\"\n        columns=\"renderProps.columns\"\n        data-description=\"{{renderProps.searchDescription}}\"\n        data-shared-item\n        data-test-subj=\"embeddedSavedSearchDocTable\"\n        data-title=\"{{renderProps.sharedItemTitle}}\"\n        filter=\"renderProps.onFilter\"\n        hits=\"renderProps.rows\"\n        index-pattern=\"renderProps.indexPattern\"\n        is-loading=\"renderProps.isLoading\"\n        on-add-column=\"renderProps.onAddColumn\"\n        on-change-sort-order=\"renderProps.onSort\"\n        on-move-column=\"renderProps.onMoveColumn\"\n        on-remove-column=\"renderProps.onRemoveColumn\"\n        render-complete\n        sorting=\"renderProps.sort\"\n        total-hit-count=\"renderProps.totalHitCount\"\n        use-new-fields-api=\"renderProps.useNewFieldsApi\"></doc-table>`\n  };\n  return async () => {\n    try {\n      const injector = await getServices().getEmbeddableInjector();\n      return await injectAngularElement(domNode, directive.template, props, injector);\n    } catch (e) {\n      // eslint-disable-next-line no-console\n      console.error(e);\n      throw e;\n    }\n  };\n}\n\nexport function DiscoverDocTableEmbeddable(props) {\n  return /*#__PURE__*/React.createElement(I18nProvider, null, /*#__PURE__*/React.createElement(DocTableLegacyInner, props));\n}\n\nfunction DocTableLegacyInner(renderProps) {\n  const scope = useRef();\n  useEffect(() => {\n    if (renderProps.refs && !scope.current) {\n      const fn = getRenderFn(renderProps.refs, renderProps);\n      fn().then(newScope => {\n        scope.current = newScope;\n      });\n    } else if (scope !== null && scope !== void 0 && scope.current) {\n      scope.current.renderProps = { ...renderProps\n      };\n      scope.current.$applyAsync();\n    }\n  }, [renderProps]);\n  useEffect(() => {\n    return () => {\n      var _scope$current;\n\n      (_scope$current = scope.current) === null || _scope$current === void 0 ? void 0 : _scope$current.$destroy();\n    };\n  }, []);\n  return /*#__PURE__*/React.createElement(React.Fragment, null);\n}","/*\n * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n * or more contributor license agreements. Licensed under the Elastic License\n * 2.0 and the Server Side Public License, v 1; you may not use this file except\n * in compliance with, at your election, the Elastic License 2.0 or the Server\n * Side Public License, v 1.\n */\nimport { getSortForSearchSource } from '../../angular/doc_table';\nexport const updateSearchSource = (searchSource, indexPattern, sort, useNewFieldsApi, defaults) => {\n  const {\n    sampleSize,\n    defaultSort\n  } = defaults;\n  searchSource.setField('size', sampleSize);\n  searchSource.setField('sort', getSortForSearchSource(sort, indexPattern, defaultSort));\n\n  if (useNewFieldsApi) {\n    searchSource.removeField('fieldsFromSource');\n    const fields = {\n      field: '*',\n      include_unmapped: 'true'\n    };\n    searchSource.setField('fields', [fields]);\n  } else {\n    searchSource.removeField('fields');\n  }\n};","function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n/*\n * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n * or more contributor license agreements. Licensed under the Elastic License\n * 2.0 and the Server Side Public License, v 1; you may not use this file except\n * in compliance with, at your election, the Elastic License 2.0 or the Server\n * Side Public License, v 1.\n */\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { i18n } from '@kbn/i18n';\nimport { isEqual } from 'lodash';\nimport { Embeddable } from '../../../../../src/plugins/embeddable/public';\nimport { RequestAdapter } from '../../../../../src/plugins/inspector/common';\nimport { SEARCH_EMBEDDABLE_TYPE } from './constants';\nimport { APPLY_FILTER_TRIGGER, esFilters } from '../../../../../src/plugins/data/public';\nimport { SavedSearchEmbeddableComponent } from './saved_search_embeddable_component';\nimport { getServices } from '../../kibana_services';\nimport { DOC_HIDE_TIME_COLUMN_SETTING, DOC_TABLE_LEGACY, SAMPLE_SIZE_SETTING, SEARCH_FIELDS_FROM_SOURCE, SORT_DEFAULT_ORDER_SETTING } from '../../../common';\nimport * as columnActions from '../angular/doc_table/actions/columns';\nimport { getDefaultSort } from '../angular/doc_table';\nimport { handleSourceColumnState } from '../angular/helpers';\nimport { updateSearchSource } from './helpers/update_search_source';\nexport class SavedSearchEmbeddable extends Embeddable {\n  constructor({\n    savedSearch,\n    editUrl,\n    editPath,\n    indexPatterns,\n    editable,\n    filterManager,\n    services\n  }, initialInput, executeTriggerActions, parent) {\n    super(initialInput, {\n      defaultTitle: savedSearch.title,\n      editUrl,\n      editPath,\n      editApp: 'discover',\n      indexPatterns,\n      editable\n    }, parent);\n    this.executeTriggerActions = executeTriggerActions;\n\n    _defineProperty(this, \"savedSearch\", void 0);\n\n    _defineProperty(this, \"inspectorAdapters\", void 0);\n\n    _defineProperty(this, \"panelTitle\", '');\n\n    _defineProperty(this, \"filtersSearchSource\", void 0);\n\n    _defineProperty(this, \"subscription\", void 0);\n\n    _defineProperty(this, \"type\", SEARCH_EMBEDDABLE_TYPE);\n\n    _defineProperty(this, \"filterManager\", void 0);\n\n    _defineProperty(this, \"abortController\", void 0);\n\n    _defineProperty(this, \"services\", void 0);\n\n    _defineProperty(this, \"prevTimeRange\", void 0);\n\n    _defineProperty(this, \"prevFilters\", void 0);\n\n    _defineProperty(this, \"prevQuery\", void 0);\n\n    _defineProperty(this, \"prevSearchSessionId\", void 0);\n\n    _defineProperty(this, \"searchProps\", void 0);\n\n    _defineProperty(this, \"node\", void 0);\n\n    _defineProperty(this, \"fetch\", async () => {\n      const searchSessionId = this.input.searchSessionId;\n      const useNewFieldsApi = !this.services.uiSettings.get(SEARCH_FIELDS_FROM_SOURCE, false);\n      if (!this.searchProps) return;\n      const {\n        searchSource\n      } = this.savedSearch; // Abort any in-progress requests\n\n      if (this.abortController) this.abortController.abort();\n      this.abortController = new AbortController();\n      updateSearchSource(searchSource, this.searchProps.indexPattern, this.searchProps.sort, useNewFieldsApi, {\n        sampleSize: this.services.uiSettings.get(SAMPLE_SIZE_SETTING),\n        defaultSort: this.services.uiSettings.get(SORT_DEFAULT_ORDER_SETTING)\n      }); // Log request to inspector\n\n      this.inspectorAdapters.requests.reset();\n      this.searchProps.isLoading = true;\n      this.updateOutput({\n        loading: true,\n        error: undefined\n      });\n\n      try {\n        // Make the request\n        const {\n          rawResponse: resp\n        } = await searchSource.fetch$({\n          abortSignal: this.abortController.signal,\n          sessionId: searchSessionId,\n          inspector: {\n            adapter: this.inspectorAdapters.requests,\n            title: i18n.translate('discover.embeddable.inspectorRequestDataTitle', {\n              defaultMessage: 'Data'\n            }),\n            description: i18n.translate('discover.embeddable.inspectorRequestDescription', {\n              defaultMessage: 'This request queries Elasticsearch to fetch the data for the search.'\n            })\n          }\n        }).toPromise();\n        this.updateOutput({\n          loading: false,\n          error: undefined\n        });\n        this.searchProps.rows = resp.hits.hits;\n        this.searchProps.totalHitCount = resp.hits.total;\n        this.searchProps.isLoading = false;\n      } catch (error) {\n        this.updateOutput({\n          loading: false,\n          error\n        });\n        this.searchProps.isLoading = false;\n      }\n    });\n\n    this.services = services;\n    this.filterManager = filterManager;\n    this.savedSearch = savedSearch;\n    this.inspectorAdapters = {\n      requests: new RequestAdapter()\n    };\n    this.initializeSearchEmbeddableProps();\n    this.subscription = this.getUpdated$().subscribe(() => {\n      this.panelTitle = this.output.title || '';\n\n      if (this.searchProps) {\n        this.pushContainerStateParamsToProps(this.searchProps);\n      }\n    });\n  }\n\n  initializeSearchEmbeddableProps() {\n    const {\n      searchSource\n    } = this.savedSearch;\n    const indexPattern = searchSource.getField('index');\n\n    if (!indexPattern) {\n      return;\n    }\n\n    if (!this.savedSearch.sort || !this.savedSearch.sort.length) {\n      this.savedSearch.sort = getDefaultSort(indexPattern, getServices().uiSettings.get(SORT_DEFAULT_ORDER_SETTING, 'desc'));\n    }\n\n    const props = {\n      columns: this.savedSearch.columns,\n      indexPattern,\n      isLoading: false,\n      sort: getDefaultSort(indexPattern, getServices().uiSettings.get(SORT_DEFAULT_ORDER_SETTING, 'desc')),\n      rows: [],\n      searchDescription: this.savedSearch.description,\n      description: this.savedSearch.description,\n      inspectorAdapters: this.inspectorAdapters,\n      searchTitle: this.savedSearch.lastSavedTitle,\n      services: this.services,\n      onAddColumn: columnName => {\n        if (!props.columns) {\n          return;\n        }\n\n        const updatedColumns = columnActions.addColumn(props.columns, columnName, true);\n        this.updateInput({\n          columns: updatedColumns\n        });\n      },\n      onRemoveColumn: columnName => {\n        if (!props.columns) {\n          return;\n        }\n\n        const updatedColumns = columnActions.removeColumn(props.columns, columnName, true);\n        this.updateInput({\n          columns: updatedColumns\n        });\n      },\n      onMoveColumn: (columnName, newIndex) => {\n        if (!props.columns) {\n          return;\n        }\n\n        const columns = columnActions.moveColumn(props.columns, columnName, newIndex);\n        this.updateInput({\n          columns\n        });\n      },\n      onSetColumns: columns => {\n        this.updateInput({\n          columns\n        });\n      },\n      onSort: sort => {\n        const sortOrderArr = [];\n        sort.forEach(arr => {\n          sortOrderArr.push(arr);\n        });\n        this.updateInput({\n          sort: sortOrderArr\n        });\n      },\n      sampleSize: 500,\n      onFilter: async (field, value, operator) => {\n        let filters = esFilters.generateFilters(this.filterManager, // @ts-expect-error\n        field, value, operator, indexPattern.id);\n        filters = filters.map(filter => ({ ...filter,\n          $state: {\n            store: esFilters.FilterStateStore.APP_STATE\n          }\n        }));\n        await this.executeTriggerActions(APPLY_FILTER_TRIGGER, {\n          embeddable: this,\n          filters\n        });\n      },\n      useNewFieldsApi: !this.services.uiSettings.get(SEARCH_FIELDS_FROM_SOURCE, false),\n      showTimeCol: !this.services.uiSettings.get(DOC_HIDE_TIME_COLUMN_SETTING, false),\n      ariaLabelledBy: 'documentsAriaLabel'\n    };\n    const timeRangeSearchSource = searchSource.create();\n    timeRangeSearchSource.setField('filter', () => {\n      if (!this.searchProps || !this.input.timeRange) return;\n      return this.services.timefilter.createFilter(indexPattern, this.input.timeRange);\n    });\n    this.filtersSearchSource = searchSource.create();\n    this.filtersSearchSource.setParent(timeRangeSearchSource);\n    searchSource.setParent(this.filtersSearchSource);\n    this.pushContainerStateParamsToProps(props);\n    props.isLoading = true;\n\n    if (this.savedSearch.grid) {\n      props.settings = this.savedSearch.grid;\n    }\n  }\n\n  async pushContainerStateParamsToProps(searchProps, {\n    forceFetch = false\n  } = {\n    forceFetch: false\n  }) {\n    var _this$searchProps;\n\n    const isFetchRequired = !esFilters.onlyDisabledFiltersChanged(this.input.filters, this.prevFilters) || !isEqual(this.prevQuery, this.input.query) || !isEqual(this.prevTimeRange, this.input.timeRange) || !isEqual(searchProps.sort, this.input.sort || this.savedSearch.sort) || this.prevSearchSessionId !== this.input.searchSessionId; // If there is column or sort data on the panel, that means the original columns or sort settings have\n    // been overridden in a dashboard.\n\n    searchProps.columns = handleSourceColumnState({\n      columns: this.input.columns || this.savedSearch.columns\n    }, this.services.core.uiSettings).columns;\n    const savedSearchSort = this.savedSearch.sort && this.savedSearch.sort.length ? this.savedSearch.sort : getDefaultSort((_this$searchProps = this.searchProps) === null || _this$searchProps === void 0 ? void 0 : _this$searchProps.indexPattern, getServices().uiSettings.get(SORT_DEFAULT_ORDER_SETTING, 'desc'));\n    searchProps.sort = this.input.sort || savedSearchSort;\n    searchProps.sharedItemTitle = this.panelTitle;\n\n    if (forceFetch || isFetchRequired) {\n      var _this$input$query, _this$input$filters;\n\n      this.filtersSearchSource.setField('filter', this.input.filters);\n      this.filtersSearchSource.setField('query', this.input.query);\n\n      if ((_this$input$query = this.input.query) !== null && _this$input$query !== void 0 && _this$input$query.query || (_this$input$filters = this.input.filters) !== null && _this$input$filters !== void 0 && _this$input$filters.length) {\n        this.filtersSearchSource.setField('highlightAll', true);\n      } else {\n        this.filtersSearchSource.removeField('highlightAll');\n      }\n\n      this.prevFilters = this.input.filters;\n      this.prevQuery = this.input.query;\n      this.prevTimeRange = this.input.timeRange;\n      this.prevSearchSessionId = this.input.searchSessionId;\n      this.searchProps = searchProps;\n      await this.fetch();\n    } else if (this.searchProps && this.node) {\n      this.searchProps = searchProps;\n    }\n\n    if (this.node) {\n      this.renderReactComponent(this.node, this.searchProps);\n    }\n  }\n  /**\n   *\n   * @param {Element} domNode\n   */\n\n\n  async render(domNode) {\n    if (!this.searchProps) {\n      throw new Error('Search props not defined');\n    }\n\n    if (this.node) {\n      ReactDOM.unmountComponentAtNode(this.node);\n    }\n\n    this.node = domNode;\n  }\n\n  renderReactComponent(domNode, searchProps) {\n    if (!this.searchProps) {\n      return;\n    }\n\n    const useLegacyTable = this.services.uiSettings.get(DOC_TABLE_LEGACY);\n    const props = {\n      searchProps,\n      useLegacyTable,\n      refs: domNode\n    };\n    ReactDOM.render( /*#__PURE__*/React.createElement(SavedSearchEmbeddableComponent, props), domNode);\n  }\n\n  reload() {\n    if (this.searchProps) {\n      this.pushContainerStateParamsToProps(this.searchProps, {\n        forceFetch: true\n      });\n    }\n  }\n\n  getSavedSearch() {\n    return this.savedSearch;\n  }\n\n  getInspectorAdapters() {\n    return this.inspectorAdapters;\n  }\n\n  destroy() {\n    var _this$subscription;\n\n    super.destroy();\n    this.savedSearch.destroy();\n\n    if (this.searchProps) {\n      delete this.searchProps;\n    }\n\n    (_this$subscription = this.subscription) === null || _this$subscription === void 0 ? void 0 : _this$subscription.unsubscribe();\n    if (this.abortController) this.abortController.abort();\n  }\n\n}","function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\n/*\n * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n * or more contributor license agreements. Licensed under the Elastic License\n * 2.0 and the Server Side Public License, v 1; you may not use this file except\n * in compliance with, at your election, the Elastic License 2.0 or the Server\n * Side Public License, v 1.\n */\nimport React from 'react';\nimport { DiscoverGridEmbeddable } from '../angular/create_discover_grid_directive';\nimport { DiscoverDocTableEmbeddable } from '../angular/doc_table/create_doc_table_embeddable';\nconst DiscoverDocTableEmbeddableMemoized = /*#__PURE__*/React.memo(DiscoverDocTableEmbeddable);\nconst DiscoverGridEmbeddableMemoized = /*#__PURE__*/React.memo(DiscoverGridEmbeddable);\nexport function SavedSearchEmbeddableComponent({\n  searchProps,\n  useLegacyTable,\n  refs\n}) {\n  if (useLegacyTable) {\n    const docTableProps = { ...searchProps,\n      refs\n    };\n    return /*#__PURE__*/React.createElement(DiscoverDocTableEmbeddableMemoized, docTableProps);\n  }\n\n  const discoverGridProps = searchProps;\n  return /*#__PURE__*/React.createElement(DiscoverGridEmbeddableMemoized, _extends({}, discoverGridProps, {\n    className: \"dscDiscoverGrid\"\n  }));\n}"],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;ACxEA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;AC1BA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;ACjWA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;A","sourceRoot":""}